package dmsystem.util;

import java.util.Date;
import java.util.List;

import dmsystem.entity.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.*;

import org.hibernate.criterion.Order;

/**
 * HibernateUtil generated by Justin Yang
 */
public class HibernateUtil {
	
	private static final Log log = LogFactory.getLog("DMSystem");

    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

	public void persist(Object transientInstance) throws Exception {
		log.debug("persisting instance");
		Session session = sessionFactory.getCurrentSession();
	    try {
	        session.beginTransaction();
	        session.save(transientInstance);
	        session.getTransaction().commit();
			log.debug("persist successful");
	    } catch (HibernateException he) {
	        session.getTransaction().rollback();
			log.error("persist failed", he);
			throw he;
	    } finally {
            if (session != null) {
                session.flush();
            }
        }
    }
	
	@SuppressWarnings("rawtypes")
	public void persist(List transientInstances) throws Exception {
		log.debug("persisting list of instances");
		Session session = sessionFactory.getCurrentSession();
	    try {
	        session.beginTransaction();
	        
	        for (Object transientInstance : transientInstances) {
		        session.save(transientInstance);
	        }
	        session.getTransaction().commit();
			log.debug("persist successful");
	    } catch (HibernateException he) {
	        session.getTransaction().rollback();
			log.error("persist failed", he);
			throw he;
	    } finally {
            if (session != null) {
                session.flush();
            }
        }
	}

	public void remove(Object persistentInstance) throws Exception {
		log.debug("removing instance");
		Session session = sessionFactory.getCurrentSession();
		try {
	        session.beginTransaction();
	        session.delete(persistentInstance);
	        session.getTransaction().commit();
			log.debug("remove successful");
		} catch (RuntimeException re) {
            session.getTransaction().rollback();
			log.error("remove failed", re);
			throw re;
		} finally {
            if (session != null) {
                session.flush();
            }
        }
	}

	public void update(Object detachedInstance) throws Exception {
		log.debug("merging instance");
		Session session = sessionFactory.getCurrentSession();
		try {
	        session.beginTransaction();
	        session.update(detachedInstance);
	        session.getTransaction().commit();
			log.debug("merge successful");
		} catch (RuntimeException re) {
            session.getTransaction().rollback();
			log.error("merge failed", re);
			throw re;
		} finally {
            if (session != null) {
                session.flush();
            }
        }
	}

	@SuppressWarnings("rawtypes")
	public Object findById(Class objectClass, int id) throws Exception {
		log.debug("getting instance with id: " + id);
		Session session = sessionFactory.getCurrentSession();
		try {
			Object instance = session.get(objectClass, id);
			log.debug("get successful");
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	
	@SuppressWarnings("rawtypes")
	public List getAll(Class objectClass, String orderByProperty, Boolean asc) throws Exception {
		log.debug("getting all instance");
		Session session = sessionFactory.getCurrentSession();
		try {
            String sql = "from " + objectClass.getName();
            if (orderByProperty != null) {
                sql += " order by " + orderByProperty;
                if (asc) {
                    sql += " asc";
                } else {
                    sql += " desc";
                }
            }
			List instance = session.createQuery(sql).list();
			log.debug("get successful");

			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

}