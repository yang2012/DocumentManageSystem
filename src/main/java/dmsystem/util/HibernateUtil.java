package dmsystem.util;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.*;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;

import org.hibernate.criterion.Order;

/**
 * HibernateUtil generated by Justin Yang
 */
public class HibernateUtil {
	
	private static final Log log = LogFactory.getLog("DMSystem");

    private SessionFactory sessionFactory;

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }

	public void persist(Object transientInstance) throws Exception {
		log.debug("persisting instance");
		Session session = sessionFactory.openSession();
	    try {
	        session.beginTransaction();
	        session.save(transientInstance);
	        session.getTransaction().commit();
			log.debug("persist successful");
	    } catch (HibernateException he) {
	        session.getTransaction().rollback();
			log.error("persist failed", he);
			throw he;
	    } finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}
	
	@SuppressWarnings("rawtypes")
	public void persist(List transientInstances) throws Exception {
		log.debug("persisting list of instances");
		Session session = sessionFactory.openSession();
	    try {
	        session.beginTransaction();
	        
	        for (Object transientInstance : transientInstances) {
		        session.save(transientInstance);
	        }
	        session.getTransaction().commit();
			log.debug("persist successful");
	    } catch (HibernateException he) {
	        session.getTransaction().rollback();
			log.error("persist failed", he);
			throw he;
	    } finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}

	public void remove(Object persistentInstance) throws Exception {
		log.debug("removing instance");
		Session session = sessionFactory.openSession();
		try {
	        session.beginTransaction();
	        session.delete(persistentInstance);
	        session.getTransaction().commit();
			log.debug("remove successful");
		} catch (RuntimeException re) {
			log.error("remove failed", re);
			throw re;
		} finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}

	public void update(Object detachedInstance) throws Exception {
		log.debug("merging instance");
		Session session = sessionFactory.openSession();
		try {
	        session.beginTransaction();
	        session.update(detachedInstance);
	        session.getTransaction().commit();
			log.debug("merge successful");
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		} finally {
			session.close();
		}
	}

	@SuppressWarnings("rawtypes")
	public Object findById(Class objectClass, int id) throws Exception {
		log.debug("getting instance with id: " + id);
		Session session = sessionFactory.openSession();
		try {
	        session.beginTransaction();
			Object instance = session.get(objectClass, id);
			log.debug("get successful");
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		} finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}

    public Object initialize(Object proxy) {
        log.debug("initializing instance");
        Session session = sessionFactory.openSession();
        try {
            session.beginTransaction();
            if (Hibernate.isInitialized(proxy)) {
                Hibernate.initialize(proxy);
            }
            log.debug("initialize successful");
        } catch (RuntimeException re) {
            log.error("initialize failed", re);
            throw re;
        } finally {
            if (session != null) {
                session.close();
            }
        }
        return proxy;
    }
	
	@SuppressWarnings("rawtypes")
	public List getAll(Class objectClass, String orderByProperty, Boolean asc) throws Exception {
		log.debug("getting all instance");
		Session session = sessionFactory.openSession();
		try {
	        session.beginTransaction();
            Criteria criteria = session.createCriteria(objectClass);
            Order order = null;
            if (asc) {
                criteria.addOrder(Order.asc(orderByProperty));
            } else {
                criteria.addOrder(Order.desc(orderByProperty));
            }
			List instance = criteria.list();
			log.debug("get successful");
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		} finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	}
}